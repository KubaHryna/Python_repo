#Jakub Hryniewicz,169245,Wariant 1


#zad 1.1
def func(krotka):
    krotka2=tuple(set(krotka))
    print(krotka2)


a=(3,2,5,3)
func(a)

#zad 1.2

letters = 'qwertyuioplkjhgfdsazxcvbnm'
cos = "kolorowe auto"
slowo = ''.join([x for x in cos if x in letters])
slowo2 = ""
for y in range(0, len(slowo), 3):
    slowo2 += slowo[y]
for x in range(len(slowo2)-1, -1, -1):
    print(slowo2[x], end=" ")
print("\n")
#zad 1.3
def rekurencja(n):
    if n == 0 or n ==1 or n==2:
        return 1
    else:
        return 2 * rekurencja(n-1) + rekurencja(n-2) - rekurencja(n-3)


print(rekurencja(19))

#zad 1.4
def func2(*args):
        iloczyn=1
        for i in range(len(args)):
            iloczyn*=args[i]
        return iloczyn


print(func2(5,2,7))

#zad 1.5
lista = ["los","kwiatek","mysz","laponia","laczek"]
lista3= ["koło","kolarowa","owoc","kwas","klasa"]
lista2 = [x for x in lista if 'l' in x and 'a' in x]
lista4 = [x for x in lista3 if 'l' in x and 'a' in x]
print(lista2)
print(lista4)

#zad 1.6
def czy_palindrom(zdanie):
    zdanie = zdanie.lower().replace(" ", "")
    if zdanie == zdanie[::-1]:
        print("To zdanie jest palindromem")
    else: print("To zdanie nie jest palindromem")


czy_palindrom("A to kawony sama da Ada")
czy_palindrom("Ma synowa kota")
czy_palindrom("Kobyła ma mały bok")

#zad 1.7

class Frac:
    def __init__(self, licznik, mianownik=1):
        nwd=self.najwiekszy_wspolny_dzilenik(licznik, mianownik)
        self.licznik = licznik // nwd
        self.mianownik = mianownik // nwd

    def __str__(self):
        if self.mianownik == 1:
            return str(self.licznik)
        else:
            return f"{self.licznik}/{self.mianownik}"


    def __add__(self, other):
        licznik = self.licznik * other.mianownik + other.licznik * self.mianownik
        mianownik = self.mianownik * other.mianownik
        return Frac(licznik, mianownik)

    def __sub__(self, other):
        licznik = self.licznik * other.mianownik - other.licznik * self.mianownik
        mianownik = self.mianownik * other.mianownik
        return Frac(licznik, mianownik)

    def __mul__(self, other):
        licznik = self.licznik * other.licznik
        mianownik = self.mianownik * other.mianownik
        return Frac(licznik, mianownik)

    def __truediv__(self, other):
        licznik = self.licznik * other.mianownik
        mianownik = self.mianownik * other.licznik
        return Frac(licznik, mianownik)

    def __gt__(self, other):
        a = self.licznik * other.mianownik
        b = other.licznik * self.mianownik
        return a > b

    def najwiekszy_wspolny_dzilenik(self, a, b):
        if b == 0:
            return a
        else:
            return self.najwiekszy_wspolny_dzilenik(b, a % b)

print(Frac(2,6)-Frac(1,5))
